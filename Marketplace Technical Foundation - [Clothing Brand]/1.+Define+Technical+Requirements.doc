Message-ID: <2131249004.37.1737110069026@1f4b50e70a37>
Subject: Exported From Confluence
MIME-Version: 1.0
Content-Type: multipart/related; 
	boundary="----=_Part_36_2033101410.1737110069025"

------=_Part_36_2033101410.1737110069025
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable
Content-Location: file:///C:/exported.html

<html xmlns:o=3D'urn:schemas-microsoft-com:office:office'
      xmlns:w=3D'urn:schemas-microsoft-com:office:word'
      xmlns:v=3D'urn:schemas-microsoft-com:vml'
      xmlns=3D'urn:w3-org-ns:HTML'>
<head>
    <meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dutf-8=
">
    <title>1. Define Technical Requirements</title>
    <!--[if gte mso 9]>
    <xml>
        <o:OfficeDocumentSettings>
            <o:TargetScreenSize>1024x640</o:TargetScreenSize>
            <o:PixelsPerInch>72</o:PixelsPerInch>
            <o:AllowPNG/>
        </o:OfficeDocumentSettings>
        <w:WordDocument>
            <w:View>Print</w:View>
            <w:Zoom>90</w:Zoom>
            <w:DoNotOptimizeForBrowser/>
        </w:WordDocument>
    </xml>
    <![endif]-->
    <style>
                <!--
        @page Section1 {
            size: 8.5in 11.0in;
            margin: 1.0in;
            mso-header-margin: .5in;
            mso-footer-margin: .5in;
            mso-paper-source: 0;
        }

        table {
            border: solid 1px;
            border-collapse: collapse;
        }

        table td, table th {
            border: solid 1px;
            padding: 5px;
        }

        td {
            page-break-inside: avoid;
        }

        tr {
            page-break-after: avoid;
        }

        div.Section1 {
            page: Section1;
        }

        /* Confluence print stylesheet. Common to all themes for print medi=
a */
/* Full of !important until we improve batching for print CSS */

@media print {
    #main {
        padding-bottom: 1em !important; /* The default padding of 6em is to=
o much for printouts */
    }

    body {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        font-size: 10pt;
        line-height: 1.2;
    }

    body, #full-height-container, #main, #page, #content, .has-personal-sid=
ebar #content {
        background: var(--ds-surface, #fff) !important;
        color: var(--ds-text, #000) !important;
        border: 0 !important;
        width: 100% !important;
        height: auto !important;
        min-height: auto !important;
        margin: 0 !important;
        padding: 0 !important;
        display: block !important;
    }

    a, a:link, a:visited, a:focus, a:hover, a:active {
        color: var(--ds-text, #000);
    }

    #content h1,
    #content h2,
    #content h3,
    #content h4,
    #content h5,
    #content h6 {
        font-family: Arial, Helvetica, FreeSans, sans-serif;
        page-break-after: avoid;
    }

    pre {
        font-family: Monaco, "Courier New", monospace;
    }

    #header,
    .aui-header-inner,
    #navigation,
    #sidebar,
    .sidebar,
    #personal-info-sidebar,
    .ia-fixed-sidebar,
    .page-actions,
    .navmenu,
    .ajs-menu-bar,
    .noprint,
    .inline-control-link,
    .inline-control-link a,
    a.show-labels-editor,
    .global-comment-actions,
    .comment-actions,
    .quick-comment-container,
    #addcomment {
        display: none !important;
    }

    /* CONF-28544 cannot print multiple pages in IE */
    #splitter-content {
        position: relative !important;
    }

    .comment .date::before {
        content: none !important; /* remove middot for print view */
    }

    h1.pagetitle img {
        height: auto;
        width: auto;
    }

    .print-only {
        display: block;
    }

    #footer {
        position: relative !important; /* CONF-17506 Place the footer at en=
d of the content */
        margin: 0;
        padding: 0;
        background: none;
        clear: both;
    }

    #poweredby {
        border-top: none;
        background: none;
    }

    #poweredby li.print-only {
        display: list-item;
        font-style: italic;
    }

    #poweredby li.noprint {
        display: none;
    }

    /* no width controls in print */
    .wiki-content .table-wrap,
    .wiki-content p,
    .panel .codeContent,
    .panel .codeContent pre,
    .image-wrap {
        overflow: visible !important;
    }

    /* TODO - should this work? */
    #children-section,
    #comments-section .comment,
    #comments-section .comment .comment-body,
    #comments-section .comment .comment-content,
    #comments-section .comment p {
        page-break-inside: avoid;
    }

    #page-children a {
        text-decoration: none;
    }

    /**
     hide twixies

     the specificity here is a hack because print styles
     are getting loaded before the base styles. */
    #comments-section.pageSection .section-header,
    #comments-section.pageSection .section-title,
    #children-section.pageSection .section-header,
    #children-section.pageSection .section-title,
    .children-show-hide {
        padding-left: 0;
        margin-left: 0;
    }

    .children-show-hide.icon {
        display: none;
    }

    /* personal sidebar */
    .has-personal-sidebar #content {
        margin-right: 0px;
    }

    .has-personal-sidebar #content .pageSection {
        margin-right: 0px;
    }

    .no-print, .no-print * {
        display: none !important;
    }
}
-->
    </style>
</head>
<body>
    <h1>1. Define Technical Requirements</h1>
    <div class=3D"Section1">
        <p>=E2=97=8F Frontend Requirements:</p>
<p>=E2=80=A2 Interface should be user friendly for browsing products and so=
 that it's easier for user to navigate to useful pages easily, Website's la=
nding page should me minimal and clean and with a clear call to action butt=
on from where user can easily navigate to products listing page.</p>
<p>=E2=80=A2 Design should be made with mobile first approach since most us=
er traffic is generated from mobile phones nowadays; It should be minimal s=
o that user doesn't get distracted, and it should be responsive for all the=
 devices from mobile phone to desktop.</p>
<p>=E2=80=A2 Some of the essentials pages of my marketplace are:</p>
<ol start=3D"1">
<li>
<p>Home Page / Landing Page: with clean hero section with a call to action =
button that sends user to product listing page where he can browse variety =
of products.</p></li>
<li>
<p>Product Listing page: On product lisiting page user can click on any pro=
duct to navigate to that product details page.</p></li>
<li>
<p>Product Details page:</p></li>
</ol>
<p>In product details page user will find clean and minimal UI so that it d=
oesn't distract him from the main goal, which is purchasing product.</p>
<p>=E2=80=A2 Product Information:</p>
<p>Display product details (name, description, price, and image).<br>
Ensure a visually appealing and distraction-free design.</p>
<p>=E2=80=A2 Color Selection:</p>
<p>Include several buttons representing available colors for the product.<b=
r>
When a color is selected, dynamically display size options available for th=
at color.</p>
<p>=E2=80=A2 Size Selection:</p>
<p>Display size options as buttons beneath the color selection.<br>
Sizes update dynamically based on the selected color.<br>
Each size shows the stock availabe for that size.</p>
<p>=E2=80=A2 Quantity Update Buttons:</p>
<p>Displays two buttons with increment and decrement functionality showing =
the current quantity update between these buttons in a sandwich format.</p>
<p>=E2=80=A2 Add to Cart Button:</p>
<p>A single prominent button with the text "Add to Cart".</p>
<p>If the user hasn=E2=80=99t selected a color or size, display a Toast pro=
mpting the user to select these options.<br>
On successful addition, display a Toast with the message {product.name} add=
ed to cart!.</p>
<p>=E2=80=A2 Under Product's Details:</p>
<p>There is a Section named "You Might Also Like" displaying various simill=
ar products in a carousel.</p>
<p>Then There is a "What Makes Us Different" section with some high light o=
f waht makes us different.</p>
<p>Then Finally there is a "Sign up for a Neesletter" section with email in=
put and a "Sign Up" Button.</p>
<ol start=3D"4">
<li>
<p>Cart page:</p></li>
</ol>
<p>Cart Items displayed in table's with "remove from cart button" in table =
for each cart Item.</p>
<p>Under Cart Items There is a section justified-between with "Clear Cart b=
utton" and navigation to "Checkout".</p>
<ol start=3D"5">
<li>
<p>Checkout page:</p></li>
</ol>
<p>If the customer is not signed-In he will be re directed to sign-in page,=
 because we will be storing orders in sanity CMS, with refrence to clerkId,=
 which is a unique userId provided by clerk, for every user.</p>
<p>In checkout page there is a form on left side where customer will fill h=
is details like name, email. And on the right side there is a display of ca=
rt items in "In Your Cart" section with total amount and clear cart button.=
<br>
This section is sticky so it scrolls down when user go through the form fil=
ling his details.</p>
<p>Right now I've set an Accordian with "Bank Transfer Details".<br>
Later I will remove it when payment gateway is integrated.</p>
<p>Finally on successfull Order placement confetti showers.</p>
<ol start=3D"6">
<li>
<p>Orders page:</p></li>
</ol>
<p>Orders page will list customers previous order, with order status. and r=
eal-time tracking.</p>
<p></p>
<p>=E2=97=8F Sanity CMS as Backend:</p>
<p>=E2=80=A2 I will use sanity CMS as a database for my marketplace,<br>
It will store data such as:</p>
<ol start=3D"1">
<li>
<p>Products,</p></li>
<li>
<p>Orders Records,</p></li>
<li>
<p>Customers Details,</p></li>
<li>
<p>Transactions Records,</p></li>
<li>
<p>Shipment Records,</p></li>
</ol>
<p>=E2=80=A2 [=F0=9F=8F=B7=EF=B8=8F Products Schema]:</p>
<p>import { defineType, defineField } from "sanity";</p>
<p>export default defineType({<br>
 name: "product",<br>
 title: "Product",<br>
 type: "document",<br>
 fields: [<br>
 defineField({<br>
 name: "id",<br>
 title: "ID",<br>
 type: "string",<br>
 description: "A unique identifier for the product.",<br>
 }),<br>
 defineField({<br>
 name: "name",<br>
 title: "Product Name",<br>
 type: "string",<br>
 description: "The name of the product.",<br>
 }),<br>
 defineField({<br>
 name: "price",<br>
 title: "Price",<br>
 type: "string",<br>
 description: "The price of the product.",<br>
 }),<br>
 defineField({<br>
 name: "images",<br>
 title: "Product Images",<br>
 type: "array",<br>
 of: [{ type: "image" }],<br>
 description: "Images of the product.",<br>
 }),<br>
 defineField({<br>
 name: "ratings",<br>
 title: "Ratings",<br>
 type: "number",<br>
 description: "The average ratings of the product (e.g., '5.0').",<br>
 }),<br>
 defineField({<br>
 name: "tags",<br>
 title: "Tags",<br>
 type: "array",<br>
 of: [{ type: "string" }],<br>
 description: "Tags to categorize the product (e.g., 'Best Selling').",<br>
 }),<br>
 defineField({<br>
 name: "discountPercentage",<br>
 type: "number",<br>
 title: "Discount Percentage",<br>
 }),<br>
 defineField({<br>
 name: "priceWithoutDiscount",<br>
 type: "number",<br>
 title: "Price Without Discount",<br>
 description: "Original price before discount",<br>
 }),<br>
 defineField({<br>
 name: "ratingCount",<br>
 type: "number",<br>
 title: "Rating Count",<br>
 description: "Number of ratings",<br>
 }),<br>
 defineField({<br>
 name: "description",<br>
 title: "Description",<br>
 type: "text",<br>
 description: "A detailed description of the product.",<br>
 }),<br>
 defineField({<br>
 name: "variations",<br>
 title: "Product Variations",<br>
 type: "array",<br>
 of: [<br>
 defineField({<br>
 name: "variation",<br>
 type: "object",<br>
 fields: [<br>
 {<br>
 name: "color",<br>
 title: "Color",<br>
 type: "string",<br>
 description: "Color of the product variation.",<br>
 },<br>
 {<br>
 name: "size",<br>
 title: "Size",<br>
 type: "string",<br>
 description: "Size of the product variation.",<br>
 },<br>
 {<br>
 name: "quantity",<br>
 title: "Quantity",<br>
 type: "number",<br>
 description: "Available quantity for this variation.",<br>
 },<br>
 ],<br>
 }),<br>
 ],<br>
 description: "List of variations for the product, including size, color, a=
nd quantity.",<br>
 }),<br>
 ],<br>
});</p>
<p>=E2=80=A2 [=F0=9F=A4=9D Customer Schema]:</p>
<p>import { defineType, defineField } from 'sanity'</p>
<p>export default defineType({<br>
 name: 'customer',<br>
 title: 'Customer',<br>
 type: 'document',<br>
 fields: [<br>
 defineField({<br>
 name: 'customerId',<br>
 title: 'Customer ID',<br>
 type: 'string',<br>
 readOnly: true,<br>
 }),<br>
 defineField({<br>
 name: 'name',<br>
 title: 'Name',<br>
 type: 'string',<br>
 }),<br>
 defineField({<br>
 name: 'email',<br>
 title: 'Email',<br>
 type: 'string',<br>
 }),<br>
 defineField({<br>
 name: 'phone',<br>
 title: 'Phone',<br>
 type: 'string',<br>
 }),<br>
 defineField({<br>
 name: 'address',<br>
 title: 'Address',<br>
 type: 'object',<br>
 fields: [<br>
 { name: 'street', type: 'string', title: 'Street' },<br>
 { name: 'city', type: 'string', title: 'City' },<br>
 { name: 'state', type: 'string', title: 'State' },<br>
 { name: 'zipCode', type: 'string', title: 'Zip Code' },<br>
 { name: 'country', type: 'string', title: 'Country' },<br>
 ],<br>
 }),<br>
 ],<br>
});</p>
<p>=E2=80=A2 [=F0=9F=93=9D Order Schema]:</p>
<p>import { defineType, defineField } from 'sanity'</p>
<p>export default defineType({<br>
 name: 'order',<br>
 title: 'Order',<br>
 type: 'document',<br>
 fields: [<br>
 defineField({<br>
 name: 'orderId',<br>
 title: 'Order ID',<br>
 type: 'string',<br>
 }),<br>
 defineField({<br>
 name: 'customer',<br>
 title: 'Customer',<br>
 type: 'reference',<br>
 to: [{ type: 'customer' }],<br>
 }),<br>
 defineField({<br>
 name: 'items',<br>
 title: 'Items',<br>
 type: 'array',<br>
 of: [{ type: 'reference', to: [{ type: 'product' }] }],<br>
 }),<br>
 defineField({<br>
 name: 'totalAmount',<br>
 title: 'Total Amount',<br>
 type: 'number',<br>
 }),<br>
 defineField({<br>
 name: 'status',<br>
 title: 'Order Status',<br>
 type: 'string',<br>
 options: {<br>
 list: [<br>
 { title: 'Pending', value: 'pending' },<br>
 { title: 'Processing', value: 'processing' },<br>
 { title: 'Shipped', value: 'shipped' },<br>
 { title: 'Delivered', value: 'delivered' },<br>
 ],<br>
 },<br>
 }),<br>
 defineField({<br>
 name: 'shippingAddress',<br>
 title: 'Shipping Address',<br>
 type: 'object',<br>
 fields: [<br>
 { name: 'street', type: 'string', title: 'Street' },<br>
 { name: 'city', type: 'string', title: 'City' },<br>
 { name: 'state', type: 'string', title: 'State' },<br>
 { name: 'zipCode', type: 'string', title: 'Zip Code' },<br>
 { name: 'country', type: 'string', title: 'Country' },<br>
 ],<br>
 }),<br>
 defineField({<br>
 name: "shipment",<br>
 title: "Shipment",<br>
 type: "reference",<br>
 to: [{ type: "shipment" }], // Reference to shipment schema<br>
 }),<br>
 ],<br>
})</p>
<p>=E2=80=A2 [=F0=9F=9A=9A Shipment Schema]:</p>
<p>import { defineType, defineField } from 'sanity'</p>
<p>export default defineType({<br>
 name: 'shipment',<br>
 title: 'Shipment',<br>
 type: 'document',<br>
 fields: [<br>
 defineField({<br>
 name: 'tracking_id',<br>
 title: 'Tracking ID',<br>
 type: 'string',<br>
 }),<br>
 defineField({<br>
 name: "order",<br>
 title: "Order",<br>
 type: "reference",<br>
 to: [{ type: "order" }], // Reference to order schema<br>
 }),<br>
 defineField({<br>
 name: 'shipment_status',<br>
 title: 'Shipment Status',<br>
 type: 'string',<br>
 options: {<br>
 list: [<br>
 { title: 'Pending', value: 'pending' },<br>
 { title: 'In Transit', value: 'in_transit' },<br>
 { title: 'Delivered', value: 'delivered' },<br>
 ],<br>
 },<br>
 }),<br>
 defineField({<br>
 name: 'estimated_delivery_date',<br>
 title: 'Estimated Delivery Date',<br>
 type: 'date',<br>
 }),<br>
 defineField({<br>
 name: 'carrier',<br>
 title: 'Carrier',<br>
 type: 'string',<br>
 }),<br>
 defineField({<br>
 name: 'shipment_origin',<br>
 title: 'Shipment Origin',<br>
 type: 'string',<br>
 }),<br>
 defineField({<br>
 name: 'shipment_destination',<br>
 title: 'Shipment Destination',<br>
 type: 'string',<br>
 }),<br>
 defineField({<br>
 name: "customer",<br>
 title: "Customer",<br>
 type: "reference",<br>
 to: [{ type: "customer" }], // Reference to customer schema<br>
 }),<br>
 ],<br>
})</p>
<p>=E2=80=A2 [=F0=9F=92=B3 Transaction Schema]:</p>
<p>export default {<br>
 name: 'transaction',<br>
 type: 'document',<br>
 title: 'Transaction',<br>
 fields: [<br>
 {<br>
 name: "order",<br>
 type: "reference",<br>
 to: [{ type: "order" }], // Reference to order schema<br>
 title: "Order",<br>
 description: "The order associated with this transaction",<br>
 },<br>
 {<br>
 name: 'user',<br>
 type: 'reference',<br>
 to: [{ type: 'customer' }], // Reference to a customer schema<br>
 title: 'User',<br>
 description: 'User who made the transaction',<br>
 },<br>
 {<br>
 name: 'productDetails',<br>
 type: 'array',<br>
 of: [{ type: 'reference', to: [{ type: 'product' }] }], // Reference to a =
product schema<br>
 title: 'Product Details',<br>
 description: 'Products purchased in the transaction',<br>
 },<br>
 {<br>
 name: 'amount',<br>
 type: 'number',<br>
 title: 'Amount',<br>
 description: 'Total amount of the transaction',<br>
 },<br>
 {<br>
 name: 'paymentStatus',<br>
 type: 'string',<br>
 title: 'Payment Status',<br>
 options: {<br>
 list: [<br>
 { title: 'Success', value: 'success' },<br>
 { title: 'Pending', value: 'pending' },<br>
 { title: 'Failed', value: 'failed' },<br>
 ],<br>
 },<br>
 },<br>
 {<br>
 name: 'transactionDate',<br>
 type: 'datetime',<br>
 title: 'Transaction Date',<br>
 },<br>
 ],<br>
 };</p>
<p>=E2=97=8F Summary of Schema Relationships:</p>
<p>=E2=80=A2 Product:<br>
Referenced by order and transaction.</p>
<p>=E2=80=A2 Customer:<br>
Referenced by order, shipment, and transaction.</p>
<p>=E2=80=A2 Order:<br>
References customer, product, and shipment.<br>
Referenced by shipment and transaction.</p>
<p>=E2=80=A2 Shipment:<br>
References order and customer.</p>
<p>=E2=80=A2 Transaction:<br>
References order, customer, and product.</p>
<p></p>
<p>=E2=97=8F Third-Party APIs:</p>
<p>=E2=80=A2 I will integrate some third party APIs in my marketplace:</p>
<ol start=3D"1">
<li>
<p>Clerk Auth.</p></li>
<li>
<p>ShipEngine Or Shippo.</p></li>
<li>
<p>Payment Gateway.</p></li>
</ol>
<p>=E2=97=8F Clerk Auth:</p>
<p>Integrating Clerk Auth is essential in my marketplace since, I will be s=
toring orders with refrence to clerk Auth, that means customer will be redi=
rected to sign-in page when he clicks on checkout button in Cart, after sig=
ning in he can place order, and his order in sanity studio will contain a f=
ield called clerkId, by which when he tried to view orders in Order page I =
will fetch orders made by him. And also it helps in assigning role's since =
there would be admin panel which only admin has access to, so protecting th=
at page is essential.</p>
<p>=E2=97=8F ShipEngine Or Shippo:</p>
<p>Integrating one of these shipment APIs is essential, for providing custo=
mer with real-time order tracking, Estimeted deliver time, shipment rates a=
nd shipment price if necessary.</p>
<p>=E2=97=8F Payment Gateways:</p>
<p>In my opinion Authentic payment gateways are must for a full fledge mark=
et place since, I cannot always rely on customer to make payments then plac=
e order, right now if a customer places his order his order will get posted=
 to sanity order studio, but with payment gateway I can insure that no orde=
r will get placed once payment is successfull.</p>
<p></p>
<ol start=3D"3">
<li>
<p>Plan API Requirement.</p></li>
</ol>
<p></p>
<p>=E2=97=8F API Endpoint For Posting Products To Sanity CMS:</p>
<p>=E2=80=A2 Endpoint: /products<br>
=E2=80=A2 Method: POST<br>
=E2=80=A2 Purpose: Posts all products to sanity, so that we don't have to a=
dd them manually, saving time.<br>
=E2=80=A2 Payload: Product details.</p>
<p>=E2=97=8F API Endpoint For Retriving Products From Sanity CMS:</p>
<p>=E2=80=A2 Endpoint: /products<br>
=E2=80=A2 Method: GET<br>
=E2=80=A2 Purpose: Fetch all products from sanity.<br>
=E2=80=A2 Response: Product details.</p>
<p>=E2=97=8F API Endpoint For Updating Product Stock In Sanity CMS:</p>
<p>=E2=80=A2 Endpoint: /products<br>
=E2=80=A2 Method: POST<br>
=E2=80=A2 Purpose: Updates stock of the product when a purchase is made.<br=
>
=E2=80=A2 Payload: Product details.</p>
<p>=E2=97=8F API Endpoint For Posting Orders To Sanity CMS:</p>
<p>=E2=80=A2 Endpoint: /orders<br>
=E2=80=A2 Method: POST<br>
=E2=80=A2 Description: Create a new order in Sanity.<br>
=E2=80=A2 Payload: Customer info, product details, payment status, shipment=
 details with status.</p>
<p>=E2=97=8F API Endpoint For Retriving Orders To Sanity CMS:</p>
<p>=E2=80=A2 Endpoint: /orders<br>
=E2=80=A2 Method: GET<br>
=E2=80=A2 Purpose: Fetch orders from sanity.<br>
=E2=80=A2 Response: Customer info, product details, payment status, shipmen=
t details with status.</p>
    </div>
</body>
</html>
------=_Part_36_2033101410.1737110069025--
